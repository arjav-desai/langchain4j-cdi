# Inspired from https://foojay.io/today/how-to-release-a-java-module-with-jreleaser-to-maven-central-with-github-actions/
name: Publish a new release
on:
  repository_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
      nextVersion:
        description: 'Next version after release (-SNAPSHOT will be added automatically)'
        required: true
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
      nextVersion:
        description: 'Next version after release (-SNAPSHOT will be added automatically)'
        required: true

jobs:
  deploy:
    name: Release on MavenCentral
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
          server-id: central # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_CENTRAL_USERNAME
          server-password: MAVEN_CENTRAL_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: GPG_PASSPHRASE

      - name: Run a build of the code base before release
        run: mvn --batch-mode --no-transfer-progress clean install

      - name: Release Prepare
        run: mvn --batch-mode release:prepare -Psign -DreleaseVersion=${{ github.event.inputs.version }} -DdevelopmentVersion=${{ github.event.inputs.nextVersion }}-SNAPSHOT -DdryRun

      - name: Release Perform
        run: |
          mvn --batch-mode release:perform -Psign -DdryRun
        env:
          MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v5
      - id: read-changelog
        uses: mindsers/changelog-reader-action@v2
        with:
          path: ./CHANGELOG.md
          version: ${{ github.event.inputs.version }}
      - uses: actions/github-script@v7
        with:
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                    draft: false,
                    generate_release_notes: true,
                    name: LangChain4J CDI ${{ github.event.inputs.version }},
                    owner: context.repo.owner,
                    prerelease: false,
                    repo: context.repo.repo,
                    tag_name: ${{ steps.get-version.inputs.version }},
                  });

                  core.exportVariable('RELEASE_ID', response.data.id);
                  core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }