# Inspired from https://foojay.io/today/how-to-release-a-java-module-with-jreleaser-to-maven-central-with-github-actions/
name: Publish a new release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
      nextVersion:
        description: 'Next version after release (-SNAPSHOT will be added automatically)'
        required: true

jobs:
  deploy:
    name: Release on MavenCentral
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Git checkout
        uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
          server-id: central # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_CENTRAL_USERNAME
          server-password: MAVEN_CENTRAL_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: GPG_PASSPHRASE
      - run: |
          git config --global user.name 'Langchain4J CDI'
          git config --global user.email 'langchain4j.cdi@gmail.com'
      - name: Git environment
        run: |
          git remote -v
          git log
      - name: Release Prepare
        run: ./mvnw --batch-mode release:prepare -e -DreleaseVersion=${{ github.event.inputs.version }} -DdevelopmentVersion=${{ github.event.inputs.nextVersion }}-SNAPSHOT
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Release Perform
        run: |
          ./mvnw --batch-mode release:perform -P\!unpublished
        env:
          MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Push result report
        run: |
          git remote -v
          git log
          git push --tags
          git push
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: "Determine tag"
        run: "echo \"RELEASE_TAG=${{ github.event.inputs.version }}\" >> $GITHUB_ENV"
      - name: "Determine Previous tag"
        run: |
          PREVIOUS_TAG=`git tag --sort -taggerdate | head -2 | tail -1`
          echo \"PREVIOUS_TAG=$PREVIOUS_TAG\" >> $GITHUB_ENV
      - name: "Determine Release Name"
        run: "echo \"RELEASE_NAME=LangChain4J CDI ${{ github.event.inputs.version }}\" >> $GITHUB_ENV"
      - name: "Create release"
        uses: "actions/github-script@v8"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_NAME,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
                previous_tag_name: process.env.PREVIOUS_TAG
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }